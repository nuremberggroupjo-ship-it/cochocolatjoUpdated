generator client {
  provider        = "prisma-client-js"
  output          = "../src/lib/_generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  name          String
  email         String        @unique
  emailVerified Boolean       @default(false) @map("email_verified")
  image         String?
  role          UserRole      @default(USER)
  addresses     Json[]        @default([]) @map("addresses") @db.Json
  paymentMethod PaymentMethod @default(CASH_ON_DELIVERY) @map("payment_method")
  phone         String?       @db.VarChar(20)
  accounts      Account[]
  cart          Cart?
  favorites     Favorite[]
  orders        Order[]
  sessions      Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  expiresAt DateTime @map("expires_at") @db.Timestamp(6)
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  accountId             String    @map("account_id")
  providerId            String    @map("provider_id")
  accessToken           String?   @map("access_token")
  refreshToken          String?   @map("refresh_token")
  idToken               String?   @map("id_token")
  accessTokenExpiresAt  DateTime? @map("access_token_expires_at") @db.Timestamp(6)
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at") @db.Timestamp(6)
  scope                 String?
  password              String?
  userId                String    @map("user_id") @db.Uuid
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at") @db.Timestamp(6)

  @@map("verifications")
}

model Banner {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  name      String   @unique(map: "banner_name_idx") @db.VarChar(100)
  slug      String   @unique(map: "banner_slug_idx") @db.VarChar(100)
  image     String   @db.VarChar(255)
  isActive  Boolean  @default(true) @map("is_active")
  priority  Int      @default(0)

  @@index([isActive, priority], map: "banner_active_priority_idx")
  @@map("banners")
}

model Category {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  name           String    @unique(map: "category_name_idx") @db.VarChar(100)
  slug           String    @unique(map: "category_slug_idx") @db.VarChar(100)
  thumbnailImage String    @map("thumbnail_image") @db.VarChar(255)
  coverImage     String    @map("cover_image") @db.VarChar(255)
  description    String?
  isActive       Boolean   @default(true) @map("is_active")
  priority       Int?      @default(0)
  products       Product[] @relation("CategoryProducts")

  @@index([isActive], map: "category_active_idx")
  @@map("categories")
}

model Product {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)
  name             String             @unique(map: "product_name_idx") @db.VarChar(100)
  slug             String             @unique(map: "product_slug_idx") @db.VarChar(100)
  description      String
  shortDescription String             @map("short_description")
  ingredients      String?
  stock            Int                @default(0)
  price            Decimal            @default(0.00) @db.Decimal(12, 2)
  discountPrice    Decimal?           @map("discount_price") @db.Decimal(12, 2)
  isDiscountActive Boolean            @default(false) @map("is_discount_active")
  isFeatured       Boolean            @default(false) @map("is_featured")
  isActive         Boolean            @default(true) @map("is_active")
  categoryId       String             @map("category_id") @db.Uuid
  size             String?            @db.VarChar(100)
  unit             String?
  priority         Int?               @default(0)
  cartItems        CartItem[]
  favorites        Favorite[]
  orderItems       OrderItem[]
  attributes       ProductAttribute[]
  productImages    ProductImage[]
  category         Category           @relation("CategoryProducts", fields: [categoryId], references: [id])

  @@index([categoryId, isActive], map: "product_category_active_idx")
  @@index([isFeatured, isActive], map: "product_featured_active_idx")
  @@index([isActive, price], map: "product_active_price_idx")
  @@index([categoryId, isActive, price], map: "product_category_active_price_idx")
  @@index([isActive, discountPrice], map: "product_active_discount_price_idx")
  @@index([categoryId, isActive, discountPrice], map: "product_category_active_discount_price_idx")
  @@map("products")
}

model ProductImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)
  imageUrl  String   @unique(map: "product_image_url_idx") @db.VarChar(255)
  productId String?  @map("product_id") @db.Uuid
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Attribute {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime           @updatedAt @map("updated_at") @db.Timestamp(6)
  name        String             @unique(map: "attribute_name_idx") @db.VarChar(50)
  slug        String             @unique(map: "attribute_slug_idx") @db.VarChar(50)
  image       String             @db.VarChar(255)
  description String?
  products    ProductAttribute[]

  @@map("attributes")
}

model ProductAttribute {
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @map("updated_at") @db.Timestamp(6)
  productId   String    @map("product_id") @db.Uuid
  attributeId String    @map("attribute_id") @db.Uuid
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([productId, attributeId], map: "product_attribute_pk")
  @@index([attributeId], map: "product_attribute_filter_idx")
  @@map("product_attributes")
}

model Favorite {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  sessionFavoriteId String   @map("session_favorite_id")
  userId            String?  @map("user_id") @db.Uuid
  productId         String   @map("product_id") @db.Uuid
  product           Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "favorite_user_product_unique", map: "favorite_user_product_unique")
  @@unique([sessionFavoriteId, productId], name: "favorite_session_product_unique", map: "favorite_session_product_unique")
  @@index([productId], map: "favorite_product_idx")
  @@index([userId], map: "favorite_user_idx")
  @@index([sessionFavoriteId], map: "favorite_session_idx")
  @@map("favorites")
}

model Cart {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime   @updatedAt @map("updated_at") @db.Timestamp(6)
  sessionCartId String     @map("session_cart_id")
  itemsPrice    Decimal    @default(0.00) @map("items_price") @db.Decimal(12, 2)
  totalPrice    Decimal    @default(0.00) @map("total_price") @db.Decimal(12, 2)
  shippingPrice Decimal    @default(0.00) @map("shipping_price") @db.Decimal(12, 2)
  userId        String?    @unique(map: "cart_user_unique") @map("user_id") @db.Uuid
  cartItems     CartItem[]
  user          User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sessionCartId], map: "cart_session_idx")
  @@map("carts")
}

model CartItem {
  quantity  Int     @default(1)
  cartId    String  @map("cart_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([cartId, productId], map: "cart_items_cart_id_product_id_pk")
  @@map("cart_items")
}

model Order {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamp(6)
  orderNumber     String        @unique @map("order_number")
  status          OrderStatus   @default(PENDING) @map("status")
  deliveryType    DeliveryType  @map("delivery_type")
  shippingAddress Json?         @map("shipping_address") @db.Json
  paymentMethod   PaymentMethod @map("payment_method")
  paymentResult   Json?         @map("payment_result") @db.Json
  itemsPrice      Decimal       @map("items_price") @db.Decimal(12, 2)
  shippingPrice   Decimal       @map("shipping_price") @db.Decimal(12, 2)
  taxPrice        Decimal       @map("tax_price") @db.Decimal(12, 2)
  totalPrice      Decimal       @map("total_price") @db.Decimal(12, 2)
  isPaid          Boolean       @default(false) @map("is_paid")
  paidAt          DateTime?     @map("paid_at") @db.Timestamp(6)
  isDelivered     Boolean       @default(false) @map("is_delivered")
  deliveredAt     DateTime?     @map("delivered_at") @db.Timestamp(6)
  additionalNotes String?       @map("additional_notes")
  guestName       String?       @map("guest_name")
  guestPhone      String?       @map("guest_phone")
  guestEmail      String?       @map("guest_email")
  userId          String?       @map("user_id") @db.Uuid
  date            DateTime?     @db.Date
  is_gift         Boolean?      @default(false)
  orderItems      OrderItem[]
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "order_user_idx")
  @@index([createdAt], map: "order_created_idx")
  @@index([status], map: "order_status_idx")
  @@index([deliveryType], map: "order_delivery_type_idx")
  @@map("orders")
}

model OrderItem {
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(12, 2)
  name      String  @db.VarChar(100)
  slug      String  @db.VarChar(100)
  image     String  @db.VarChar(255)
  orderId   String  @map("order_id") @db.Uuid
  productId String  @map("product_id") @db.Uuid
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([orderId, productId], map: "order_items_order_id_product_id_pk")
  @@map("order_items")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  VISA
  CASH_ON_DELIVERY
  CLIQ
}

enum DeliveryType {
  PICKUP
  DELIVERY
}
